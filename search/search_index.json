{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index Tools and technologies PHP Framework Interop Group - PHP-FIG Setup # Clone repository git clone https://github.com/webservco/sandbox.git # Install dependencies ddev composer update Development: Environment ddev Xdebug + ddev + Visual Studio Code Development: Tools Static analisys","title":"Index"},{"location":"#index","text":"","title":"Index"},{"location":"#tools-and-technologies","text":"PHP Framework Interop Group - PHP-FIG","title":"Tools and technologies"},{"location":"#setup","text":"# Clone repository git clone https://github.com/webservco/sandbox.git # Install dependencies ddev composer update","title":"Setup"},{"location":"#development-environment","text":"ddev Xdebug + ddev + Visual Studio Code","title":"Development: Environment"},{"location":"#development-tools","text":"Static analisys","title":"Development: Tools"},{"location":"Development/Environment/xdebug/","text":"Xdebug + ddev + Visual Studio Code About Xdebug - Debugger and Profiler Tool for PHP This article is about using Step Debugging . \"Xdebug's step debugger allows you to interactively walk through your code to debug control flow and examine data structures.\" Setup .vscode/launch.json { // Custom xdebug configuration for Visual Studio Code + ddev \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Listen for Xdebug\", \"type\": \"php\", \"request\": \"launch\", \"port\": 9003, \"pathMappings\": { \"/var/www/html\": \"${workspaceRoot}\" } } ] } Usage Enable in ddev: ddev xdebug on . Start debugging in vscode: Open \"Run and Debug\" (Ctrl+Shift+D) Start debugging: \"Listen for Xdebug\" (F5) Test: public/xdebug-test.php Add a breakpoint (click on the left of the line number) on the line with $var3 , and another one on the line with the echo . Navigate to the page xdebug-test.php : with parameter: https://sandbox.ddev.site/xdebug-test.php?id=123 without parameter: https://sandbox.ddev.site/xdebug-test.php Page loading is paused and the editor should now be in focus. Go to vscode, some data should appear in the \"Run and Debug\" section. Note: $var3 is not initialized because the break happens before the line is processed. By clicking \"Continue\" we can go to the next breakpoint. Now also $var3 has a value. Notes Breakpoints will be added before the next line with code (if adding on a blank line, it will be moved); To debug also any errors that happen during execution (even if caught): Breakpoints > Everything. To stop debugging: vscode: red square button (Shift+F5) ddev: ddev xdebug off","title":"Xdebug + ddev + Visual Studio Code"},{"location":"Development/Environment/xdebug/#xdebug-ddev-visual-studio-code","text":"","title":"Xdebug + ddev + Visual Studio Code"},{"location":"Development/Environment/xdebug/#about","text":"Xdebug - Debugger and Profiler Tool for PHP This article is about using Step Debugging . \"Xdebug's step debugger allows you to interactively walk through your code to debug control flow and examine data structures.\"","title":"About"},{"location":"Development/Environment/xdebug/#setup","text":"","title":"Setup"},{"location":"Development/Environment/xdebug/#vscodelaunchjson","text":"{ // Custom xdebug configuration for Visual Studio Code + ddev \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Listen for Xdebug\", \"type\": \"php\", \"request\": \"launch\", \"port\": 9003, \"pathMappings\": { \"/var/www/html\": \"${workspaceRoot}\" } } ] }","title":".vscode/launch.json"},{"location":"Development/Environment/xdebug/#usage","text":"Enable in ddev: ddev xdebug on . Start debugging in vscode: Open \"Run and Debug\" (Ctrl+Shift+D) Start debugging: \"Listen for Xdebug\" (F5) Test: public/xdebug-test.php Add a breakpoint (click on the left of the line number) on the line with $var3 , and another one on the line with the echo . Navigate to the page xdebug-test.php : with parameter: https://sandbox.ddev.site/xdebug-test.php?id=123 without parameter: https://sandbox.ddev.site/xdebug-test.php Page loading is paused and the editor should now be in focus. Go to vscode, some data should appear in the \"Run and Debug\" section. Note: $var3 is not initialized because the break happens before the line is processed. By clicking \"Continue\" we can go to the next breakpoint. Now also $var3 has a value.","title":"Usage"},{"location":"Development/Environment/xdebug/#notes","text":"Breakpoints will be added before the next line with code (if adding on a blank line, it will be moved); To debug also any errors that happen during execution (even if caught): Breakpoints > Everything. To stop debugging: vscode: red square button (Shift+F5) ddev: ddev xdebug off","title":"Notes"},{"location":"Development/Environment/ddev/","text":"ddev: index About \"Docker-based PHP development environments.\" Articles Setup Usage Misc","title":"ddev: index"},{"location":"Development/Environment/ddev/#ddev-index","text":"","title":"ddev: index"},{"location":"Development/Environment/ddev/#about","text":"\"Docker-based PHP development environments.\"","title":"About"},{"location":"Development/Environment/ddev/#articles","text":"Setup Usage Misc","title":"Articles"},{"location":"Development/Environment/ddev/misc/","text":"ddev: misc Upgrading database Example: upgrade MariaDB form 10.4 to 10.8 The easy way change database version in ddev configuration, restart; If errors (\"Unable to start project because the configured database type does not match the current actual database\"), go for the hard way. The hard way backup yourself any databases you want to keep, ddev will destroy all; use phpMyAdmin or CLI, ddev snapshots will not work ddev start (do not change configuration by hand); ddev debug migrate-database mariadb:10.8 ddev will promise to import back the databases however: it will only handle the db database, any custom databases will only be destroyed; even for the db the import will fail; Other solutions untested Steps described in this bug report","title":"ddev: misc"},{"location":"Development/Environment/ddev/misc/#ddev-misc","text":"","title":"ddev: misc"},{"location":"Development/Environment/ddev/misc/#upgrading-database","text":"Example: upgrade MariaDB form 10.4 to 10.8","title":"Upgrading database"},{"location":"Development/Environment/ddev/misc/#the-easy-way","text":"change database version in ddev configuration, restart; If errors (\"Unable to start project because the configured database type does not match the current actual database\"), go for the hard way.","title":"The easy way"},{"location":"Development/Environment/ddev/misc/#the-hard-way","text":"backup yourself any databases you want to keep, ddev will destroy all; use phpMyAdmin or CLI, ddev snapshots will not work ddev start (do not change configuration by hand); ddev debug migrate-database mariadb:10.8 ddev will promise to import back the databases however: it will only handle the db database, any custom databases will only be destroyed; even for the db the import will fail;","title":"The hard way"},{"location":"Development/Environment/ddev/misc/#other-solutions","text":"untested Steps described in this bug report","title":"Other solutions"},{"location":"Development/Environment/ddev/setup/","text":"ddev: setup ddev config Customize .ddev/config.yaml php_version: \"8.2\" webserver_type: apache-fpm database: type: mariadb version: \"10.8\" timezone: Europe/Rome webimage_extra_packages: [php-ast] .ddev/php/99-custom.ini ; Custom php configuration ; Log all errors error_reporting = E_ALL ; But do not display them in the frontend display_errors = Off .ddev/docker-compose.mounts.yaml version: '3.6' services: web: volumes: - type: bind # source = path on host source: $HOME/p # target = path in container target: $HOME/p","title":"ddev: setup"},{"location":"Development/Environment/ddev/setup/#ddev-setup","text":"ddev config","title":"ddev: setup"},{"location":"Development/Environment/ddev/setup/#customize","text":"","title":"Customize"},{"location":"Development/Environment/ddev/setup/#ddevconfigyaml","text":"php_version: \"8.2\" webserver_type: apache-fpm database: type: mariadb version: \"10.8\" timezone: Europe/Rome webimage_extra_packages: [php-ast]","title":".ddev/config.yaml"},{"location":"Development/Environment/ddev/setup/#ddevphp99-customini","text":"; Custom php configuration ; Log all errors error_reporting = E_ALL ; But do not display them in the frontend display_errors = Off","title":".ddev/php/99-custom.ini"},{"location":"Development/Environment/ddev/setup/#ddevdocker-composemountsyaml","text":"version: '3.6' services: web: volumes: - type: bind # source = path on host source: $HOME/p # target = path in container target: $HOME/p","title":".ddev/docker-compose.mounts.yaml"},{"location":"Development/Environment/ddev/usage/","text":"ddev: usage # Start ddev start # Launch app ddev launch # Launch phpMyAdmin ddev launch -p # Launch Mailhog ddev launch -m # Show details ddev status # Connect to MySQL via command line from host # Find post (\"Show details\") mysql --protocol tcp -h 127.0.0.1 -P __PORT__ -u db -p # Run command in ddev environment ddev exec __COMMAND__ # Connect to ssh ddev ssh # View logs in real time ddev logs --follow","title":"ddev: usage"},{"location":"Development/Environment/ddev/usage/#ddev-usage","text":"# Start ddev start # Launch app ddev launch # Launch phpMyAdmin ddev launch -p # Launch Mailhog ddev launch -m # Show details ddev status # Connect to MySQL via command line from host # Find post (\"Show details\") mysql --protocol tcp -h 127.0.0.1 -P __PORT__ -u db -p # Run command in ddev environment ddev exec __COMMAND__ # Connect to ssh ddev ssh # View logs in real time ddev logs --follow","title":"ddev: usage"},{"location":"Development/Tools/StaticAnalisys/","text":"Static analisys PHP Parallel Lint \"This application checks the syntax of PHP files in parallel.\" clear && ddev composer check:lint Phan \"Phan is a static analyzer for PHP that prefers to minimize false-positives. Phan attempts to prove incorrectness rather than correctness.\" clear && ddev composer check:phan PHP_CodeSniffer \"PHP_CodeSniffer is a set of two PHP scripts; the main phpcs script that tokenizes PHP, JavaScript and CSS files to detect violations of a defined coding standard, and a second phpcbf script to automatically correct coding standard violations. \" Standards used: PSR-12: Extended Coding Style slevomat/coding-standard clear && ddev composer check:phpcs PHPMD \"PHPMD is a spin-off project of PHP Depend and aims to be a PHP equivalent of the well known Java tool PMD.\" clear && ddev composer check:phpmd PHPStan - PHP Static Analysis Tool \"PHPStan focuses on finding errors in your code without actually running it. It catches whole classes of bugs even before you write tests for the code. It moves PHP closer to compiled languages in the sense that the correctness of each line of the code can be checked before you run the actual line.\" clear && ddev composer check:phpstan Psalm \"Psalm is a static analysis tool for finding errors in PHP applications.\" clear && ddev composer check:psalm","title":"Static analisys"},{"location":"Development/Tools/StaticAnalisys/#static-analisys","text":"","title":"Static analisys"},{"location":"Development/Tools/StaticAnalisys/#php-parallel-lint","text":"\"This application checks the syntax of PHP files in parallel.\" clear && ddev composer check:lint","title":"PHP Parallel Lint"},{"location":"Development/Tools/StaticAnalisys/#phan","text":"\"Phan is a static analyzer for PHP that prefers to minimize false-positives. Phan attempts to prove incorrectness rather than correctness.\" clear && ddev composer check:phan","title":"Phan"},{"location":"Development/Tools/StaticAnalisys/#php_codesniffer","text":"\"PHP_CodeSniffer is a set of two PHP scripts; the main phpcs script that tokenizes PHP, JavaScript and CSS files to detect violations of a defined coding standard, and a second phpcbf script to automatically correct coding standard violations. \" Standards used: PSR-12: Extended Coding Style slevomat/coding-standard clear && ddev composer check:phpcs","title":"PHP_CodeSniffer"},{"location":"Development/Tools/StaticAnalisys/#phpmd","text":"\"PHPMD is a spin-off project of PHP Depend and aims to be a PHP equivalent of the well known Java tool PMD.\" clear && ddev composer check:phpmd","title":"PHPMD"},{"location":"Development/Tools/StaticAnalisys/#phpstan-php-static-analysis-tool","text":"\"PHPStan focuses on finding errors in your code without actually running it. It catches whole classes of bugs even before you write tests for the code. It moves PHP closer to compiled languages in the sense that the correctness of each line of the code can be checked before you run the actual line.\" clear && ddev composer check:phpstan","title":"PHPStan - PHP Static Analysis Tool"},{"location":"Development/Tools/StaticAnalisys/#psalm","text":"\"Psalm is a static analysis tool for finding errors in PHP applications.\" clear && ddev composer check:psalm","title":"Psalm"}]}