{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index Tools and technologies PHP Framework Interop Group - PHP-FIG Setup # Clone repository git clone https://github.com/webservco/sandbox.git # Install dependencies ddev composer update","title":"Index"},{"location":"#index","text":"","title":"Index"},{"location":"#tools-and-technologies","text":"PHP Framework Interop Group - PHP-FIG","title":"Tools and technologies"},{"location":"#setup","text":"# Clone repository git clone https://github.com/webservco/sandbox.git # Install dependencies ddev composer update","title":"Setup"},{"location":"Development/PHP/ErrorHandling/","text":"Error Handling","title":"Error Handling"},{"location":"Development/PHP/ErrorHandling/#error-handling","text":"","title":"Error Handling"},{"location":"Development/PHP/Application/","text":"PHP: Application: index Notes Apache Application is set up to use Apache web server (uses .htaccess file for front controller management). Articles Application setup Project structure Application workflow Application TODO Test HTTP tests: tests/HTTP/HTTPTests.http Notes Refactoring ideas Move some common code to a general library to have lighter applications ApplicationFactoryFactory use interfaces for RequestHandlerFactory , SpecificModuleControllerInstantiator ;","title":"PHP: Application: index"},{"location":"Development/PHP/Application/#php-application-index","text":"","title":"PHP: Application: index"},{"location":"Development/PHP/Application/#notes","text":"","title":"Notes"},{"location":"Development/PHP/Application/#apache","text":"Application is set up to use Apache web server (uses .htaccess file for front controller management).","title":"Apache"},{"location":"Development/PHP/Application/#articles","text":"Application setup Project structure Application workflow Application TODO","title":"Articles"},{"location":"Development/PHP/Application/#test","text":"HTTP tests: tests/HTTP/HTTPTests.http","title":"Test"},{"location":"Development/PHP/Application/#notes_1","text":"","title":"Notes"},{"location":"Development/PHP/Application/#refactoring-ideas","text":"Move some common code to a general library to have lighter applications","title":"Refactoring ideas"},{"location":"Development/PHP/Application/#applicationfactoryfactory","text":"use interfaces for RequestHandlerFactory , SpecificModuleControllerInstantiator ;","title":"ApplicationFactoryFactory"},{"location":"Development/PHP/Application/application_setup/","text":"PHP: Application setup Setup Clone sandbox project in custom folder, set custom git remote, etc; TODO : notes (check ws/component for example setup commands); Customize README.md Project name, description, etc. composer.json authors description homepage keywords name require (remove unneeded) .gitignore CHANGELOG.md CONTRIBUTING.md LICENSE mkdocs.yml site_name .ddev/config.yaml name .phpcs/php-coding-standard.xml Directories bin config src tests var/log","title":"PHP: Application setup"},{"location":"Development/PHP/Application/application_setup/#php-application-setup","text":"","title":"PHP: Application setup"},{"location":"Development/PHP/Application/application_setup/#setup","text":"Clone sandbox project in custom folder, set custom git remote, etc; TODO : notes (check ws/component for example setup commands);","title":"Setup"},{"location":"Development/PHP/Application/application_setup/#customize","text":"","title":"Customize"},{"location":"Development/PHP/Application/application_setup/#readmemd","text":"Project name, description, etc.","title":"README.md"},{"location":"Development/PHP/Application/application_setup/#composerjson","text":"authors description homepage keywords name require (remove unneeded)","title":"composer.json"},{"location":"Development/PHP/Application/application_setup/#gitignore","text":"","title":".gitignore"},{"location":"Development/PHP/Application/application_setup/#changelogmd","text":"","title":"CHANGELOG.md"},{"location":"Development/PHP/Application/application_setup/#contributingmd","text":"","title":"CONTRIBUTING.md"},{"location":"Development/PHP/Application/application_setup/#license","text":"","title":"LICENSE"},{"location":"Development/PHP/Application/application_setup/#mkdocsyml","text":"site_name","title":"mkdocs.yml"},{"location":"Development/PHP/Application/application_setup/#ddevconfigyaml","text":"name","title":".ddev/config.yaml"},{"location":"Development/PHP/Application/application_setup/#phpcsphp-coding-standardxml","text":"","title":".phpcs/php-coding-standard.xml"},{"location":"Development/PHP/Application/application_setup/#directories","text":"bin config src tests var/log","title":"Directories"},{"location":"Development/PHP/Application/application_structure/","text":"Application: Project structure Command Code that will be run by CLI Container DIY Dependency Injection container implementation. Creates and keeps a list of single instances (only one instance created). Contract Interfaces Controller Can use any nested directory structure (path is not hard coded when resolving controller); Receives a request, returns a response; Uses the same definition as Psr\\Http\\Server\\RequestHandlerInterface ; Can use a ViewRendererInterface to format the output; Since using an interface it is agnostic about the type of response it will return; the caller (usually another request handler) will feed it an appropriate view based on the request (eg. HtmlRenderer , JSONRenderer , etc) DataTransfer DTO's, ValueObject's, etc Factory DIY Dependency Injection container implementation. Create and return instance (new instance created each time); Instantiator Special type of Factory that creates objects dynamically. Used to instantiate Controllers and related objects. Middleware Do extra request processing before it is handled by a request handler. RequestHandler Handle input Request (optionally processed by middleware) return a Response that can be emitted. Service Project specific services. View View objects. Templates resources/templates template group directories; can contain/use multiple; individual theme directory structure not hardcoded so free to structure in any way; each template group can have multiple layouts (themes?) (handled via one main template) all using the same templates; eg. main.light , main.dark ; Vanilla resources/templates/vanilla simple (vanilla) PHP/HTML theme;","title":"Application: Project structure"},{"location":"Development/PHP/Application/application_structure/#application-project-structure","text":"","title":"Application: Project structure"},{"location":"Development/PHP/Application/application_structure/#command","text":"Code that will be run by CLI","title":"Command"},{"location":"Development/PHP/Application/application_structure/#container","text":"DIY Dependency Injection container implementation. Creates and keeps a list of single instances (only one instance created).","title":"Container"},{"location":"Development/PHP/Application/application_structure/#contract","text":"Interfaces","title":"Contract"},{"location":"Development/PHP/Application/application_structure/#controller","text":"Can use any nested directory structure (path is not hard coded when resolving controller); Receives a request, returns a response; Uses the same definition as Psr\\Http\\Server\\RequestHandlerInterface ; Can use a ViewRendererInterface to format the output; Since using an interface it is agnostic about the type of response it will return; the caller (usually another request handler) will feed it an appropriate view based on the request (eg. HtmlRenderer , JSONRenderer , etc)","title":"Controller"},{"location":"Development/PHP/Application/application_structure/#datatransfer","text":"DTO's, ValueObject's, etc","title":"DataTransfer"},{"location":"Development/PHP/Application/application_structure/#factory","text":"DIY Dependency Injection container implementation. Create and return instance (new instance created each time);","title":"Factory"},{"location":"Development/PHP/Application/application_structure/#instantiator","text":"Special type of Factory that creates objects dynamically. Used to instantiate Controllers and related objects.","title":"Instantiator"},{"location":"Development/PHP/Application/application_structure/#middleware","text":"Do extra request processing before it is handled by a request handler.","title":"Middleware"},{"location":"Development/PHP/Application/application_structure/#requesthandler","text":"Handle input Request (optionally processed by middleware) return a Response that can be emitted.","title":"RequestHandler"},{"location":"Development/PHP/Application/application_structure/#service","text":"Project specific services.","title":"Service"},{"location":"Development/PHP/Application/application_structure/#view","text":"View objects.","title":"View"},{"location":"Development/PHP/Application/application_structure/#templates","text":"resources/templates template group directories; can contain/use multiple; individual theme directory structure not hardcoded so free to structure in any way; each template group can have multiple layouts (themes?) (handled via one main template) all using the same templates; eg. main.light , main.dark ;","title":"Templates"},{"location":"Development/PHP/Application/application_structure/#vanilla","text":"resources/templates/vanilla simple (vanilla) PHP/HTML theme;","title":"Vanilla"},{"location":"Development/PHP/Application/application_todo/","text":"Application: TODO createCommonView : avoid creating object 2 times (current view, main view); ? ErrorController / NotFoundController : move to components; Form : create a form builder; problems: getting default data (usually dome from objects); no obvious way to solve if using static configuration;","title":"Application: TODO"},{"location":"Development/PHP/Application/application_todo/#application-todo","text":"createCommonView : avoid creating object 2 times (current view, main view); ? ErrorController / NotFoundController : move to components; Form : create a form builder; problems: getting default data (usually dome from objects); no obvious way to solve if using static configuration;","title":"Application: TODO"},{"location":"Development/PHP/Application/application_workflow/","text":"Application: Workflow (WIP) Notes Controller/Contract/ general interface Controller/Service/ general abstract controller, specific controller resources/templates/vanilla/main/ main template View/ main, specific Factory/View/Container resources/templates/vanilla/ specific config RequestHandler/Dynamic/ src/Project/Factory/Http/RequestHandlerFactory.php src/Project/Factory/Middleware/ResourceMiddlewareFactory.php src/Project/Instantiator/Controller create instantiator src/Project/Instantiator/Controller/SpecificModuleControllerInstantiator.php add line in array Basic application structure (TODO) bin (if using Command ); public .htaccess index.php resources/templates ; src/Project ; config ; Create a new module (Command) create command: src/Project/Command/ create command factory: src/Project/Factory/Command/ create command runner: bin/ Create a new module (Web) create: src/Project/Instantiator/Controller/ (if special dependencies): create: src/Project/Factory/Container/ ( TODO : add other steps) Add a new page in an existing section. ( TODO : check) define what you want to display: create view (implements ViewInterface) create template: display view (if working with storage): add interface method(s) (if working with storage): add storage method(s) create controller add route (config dir) Form workflow ( TODO : check) (if need custom method(s)) create from factory interface (extends FormFactoryInterface) create form factory (FormFactoryInterface) add/update FormFactoryContainerInterface add/update FormFactoryContainer controller: createAndHandleForm view: add form API workflow Authentication src/Project/Middleware/ApiAuthenticationMiddleware.php src/Project/Factory/Http/AbstractRequestHandlerFactory.php . createApiAuthenticationMiddleware src/Project/Factory/Http/RequestHandlerFactory.php . createRequestHandler . addMiddleware Configuration config/ Container src/Project/Contract/Container/API/ src/Project/Container/API/ src/Project/Factory/Container/APILocalDependencyContainerFactory.php src/Project/Instantiator/Controller/APIModuleControllerInstantiator.php Data Transfer Objects src/Project/DataTransfer/API/ Views src/Project/View/API/ Templates resources/templates/vanilla/main/main.api.default.php resources/templates/vanilla/api/default.php Controller src/Project/Controller/API/AbstractAPIController.php src/Project/Controller/API/APIController.php Routes configuration config/API/Routes.php Middleware src/Project/RequestHandler/Dynamic/ApiRequestHandler.php src/Project/Factory/Middleware/ResourceMiddlewareFactory.php createApiRequestHandler getResouceMiddlewareHandlers","title":"Application: Workflow (WIP)"},{"location":"Development/PHP/Application/application_workflow/#application-workflow-wip","text":"","title":"Application: Workflow (WIP)"},{"location":"Development/PHP/Application/application_workflow/#notes","text":"Controller/Contract/ general interface Controller/Service/ general abstract controller, specific controller resources/templates/vanilla/main/ main template View/ main, specific Factory/View/Container resources/templates/vanilla/ specific config RequestHandler/Dynamic/ src/Project/Factory/Http/RequestHandlerFactory.php src/Project/Factory/Middleware/ResourceMiddlewareFactory.php src/Project/Instantiator/Controller create instantiator src/Project/Instantiator/Controller/SpecificModuleControllerInstantiator.php add line in array","title":"Notes"},{"location":"Development/PHP/Application/application_workflow/#basic-application-structure","text":"(TODO) bin (if using Command ); public .htaccess index.php resources/templates ; src/Project ; config ;","title":"Basic application structure"},{"location":"Development/PHP/Application/application_workflow/#create-a-new-module-command","text":"create command: src/Project/Command/ create command factory: src/Project/Factory/Command/ create command runner: bin/","title":"Create a new module (Command)"},{"location":"Development/PHP/Application/application_workflow/#create-a-new-module-web","text":"create: src/Project/Instantiator/Controller/ (if special dependencies): create: src/Project/Factory/Container/ ( TODO : add other steps)","title":"Create a new module (Web)"},{"location":"Development/PHP/Application/application_workflow/#add-a-new-page-in-an-existing-section","text":"( TODO : check) define what you want to display: create view (implements ViewInterface) create template: display view (if working with storage): add interface method(s) (if working with storage): add storage method(s) create controller add route (config dir)","title":"Add a new page in an existing section."},{"location":"Development/PHP/Application/application_workflow/#form-workflow","text":"( TODO : check) (if need custom method(s)) create from factory interface (extends FormFactoryInterface) create form factory (FormFactoryInterface) add/update FormFactoryContainerInterface add/update FormFactoryContainer controller: createAndHandleForm view: add form","title":"Form workflow"},{"location":"Development/PHP/Application/application_workflow/#api-workflow","text":"","title":"API workflow"},{"location":"Development/PHP/Application/application_workflow/#authentication","text":"src/Project/Middleware/ApiAuthenticationMiddleware.php src/Project/Factory/Http/AbstractRequestHandlerFactory.php . createApiAuthenticationMiddleware src/Project/Factory/Http/RequestHandlerFactory.php . createRequestHandler . addMiddleware","title":"Authentication"},{"location":"Development/PHP/Application/application_workflow/#configuration","text":"config/","title":"Configuration"},{"location":"Development/PHP/Application/application_workflow/#container","text":"src/Project/Contract/Container/API/ src/Project/Container/API/ src/Project/Factory/Container/APILocalDependencyContainerFactory.php src/Project/Instantiator/Controller/APIModuleControllerInstantiator.php","title":"Container"},{"location":"Development/PHP/Application/application_workflow/#data-transfer-objects","text":"src/Project/DataTransfer/API/","title":"Data Transfer Objects"},{"location":"Development/PHP/Application/application_workflow/#views","text":"src/Project/View/API/","title":"Views"},{"location":"Development/PHP/Application/application_workflow/#templates","text":"resources/templates/vanilla/main/main.api.default.php resources/templates/vanilla/api/default.php","title":"Templates"},{"location":"Development/PHP/Application/application_workflow/#controller","text":"src/Project/Controller/API/AbstractAPIController.php src/Project/Controller/API/APIController.php","title":"Controller"},{"location":"Development/PHP/Application/application_workflow/#routes-configuration","text":"config/API/Routes.php","title":"Routes configuration"},{"location":"Development/PHP/Application/application_workflow/#middleware","text":"src/Project/RequestHandler/Dynamic/ApiRequestHandler.php src/Project/Factory/Middleware/ResourceMiddlewareFactory.php createApiRequestHandler getResouceMiddlewareHandlers","title":"Middleware"},{"location":"Development/PHP/Sandbox/","text":"PHP: Sandbox: index Sandbox functionality API module Generate JWT: https://jwt.io/#debugger-io Header: { \"alg\": \"HS256\", \"typ\": \"JWT\" } Payload: { \"sub\": \"A_USER_ID\", \"iss\": \"API_KEY_FROM_CONFIGURATION_FILE\" } Verify signature: your-256-bit-secret : JWT_SECRET from configuration file; set Authorization header (\"Bearer JWT \"); https://sandbox.ddev.site/api/v1/about https://sandbox.ddev.site/api/v1/version Test module Web: https://sandbox.ddev.site/sandbox/test Web: https://sandbox.ddev.site/sandbox/test/{SOME_STRING} CLI: ddev exec bin/sandbox-test Stuff module https://sandbox.ddev.site/stuff/items","title":"PHP: Sandbox: index"},{"location":"Development/PHP/Sandbox/#php-sandbox-index","text":"","title":"PHP: Sandbox: index"},{"location":"Development/PHP/Sandbox/#sandbox-functionality","text":"","title":"Sandbox functionality"},{"location":"Development/PHP/Sandbox/#api-module","text":"Generate JWT: https://jwt.io/#debugger-io Header: { \"alg\": \"HS256\", \"typ\": \"JWT\" } Payload: { \"sub\": \"A_USER_ID\", \"iss\": \"API_KEY_FROM_CONFIGURATION_FILE\" } Verify signature: your-256-bit-secret : JWT_SECRET from configuration file; set Authorization header (\"Bearer JWT \"); https://sandbox.ddev.site/api/v1/about https://sandbox.ddev.site/api/v1/version","title":"API module"},{"location":"Development/PHP/Sandbox/#test-module","text":"Web: https://sandbox.ddev.site/sandbox/test Web: https://sandbox.ddev.site/sandbox/test/{SOME_STRING} CLI: ddev exec bin/sandbox-test","title":"Test module"},{"location":"Development/PHP/Sandbox/#stuff-module","text":"https://sandbox.ddev.site/stuff/items","title":"Stuff module"}]}