{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index Tools and technologies PHP Framework Interop Group - PHP-FIG Setup # Clone repository git clone https://github.com/webservco/sandbox.git # Install dependencies ddev composer update Development: Environment DDEV Docker WSL Xdebug Development: Tools Documentation Static analisys TODO Article: DDEV: Custom composer configuration (private project example); Article: DDEV: Custom MySQL configuration; Article: PHP: Command line application example; Article: PHP: Configuration component usage;","title":"Index"},{"location":"#index","text":"","title":"Index"},{"location":"#tools-and-technologies","text":"PHP Framework Interop Group - PHP-FIG","title":"Tools and technologies"},{"location":"#setup","text":"# Clone repository git clone https://github.com/webservco/sandbox.git # Install dependencies ddev composer update","title":"Setup"},{"location":"#development-environment","text":"DDEV Docker WSL Xdebug","title":"Development: Environment"},{"location":"#development-tools","text":"Documentation Static analisys","title":"Development: Tools"},{"location":"#todo","text":"Article: DDEV: Custom composer configuration (private project example); Article: DDEV: Custom MySQL configuration; Article: PHP: Command line application example; Article: PHP: Configuration component usage;","title":"TODO"},{"location":"Development/Environment/DDEV/","text":"DDEV: index About \"Docker-based PHP development environments.\" Articles Install on Windows Project setup Usage Misc SQLFluff","title":"DDEV: index"},{"location":"Development/Environment/DDEV/#ddev-index","text":"","title":"DDEV: index"},{"location":"Development/Environment/DDEV/#about","text":"\"Docker-based PHP development environments.\"","title":"About"},{"location":"Development/Environment/DDEV/#articles","text":"Install on Windows Project setup Usage Misc SQLFluff","title":"Articles"},{"location":"Development/Environment/DDEV/ddev_misc/","text":"DDEV: misc Upgrading database Example: upgrade MariaDB from 10.4 to 10.8 The easy way change database version in DDEV configuration, restart; If errors (\"Unable to start project because the configured database type does not match the current actual database\"), go for the hard way. The hard way backup yourself any databases you want to keep, DDEV will destroy all; use phpMyAdmin or CLI, DDEV snapshots will not work ddev start (do not change configuration by hand); ddev debug migrate-database mariadb:10.8 DDEV will promise to import back the databases however: it will only handle the db database, any custom databases will only be destroyed; even for the db the import will sometimes fail; Other solutions Untested: steps described in this bug report","title":"DDEV: misc"},{"location":"Development/Environment/DDEV/ddev_misc/#ddev-misc","text":"","title":"DDEV: misc"},{"location":"Development/Environment/DDEV/ddev_misc/#upgrading-database","text":"Example: upgrade MariaDB from 10.4 to 10.8","title":"Upgrading database"},{"location":"Development/Environment/DDEV/ddev_misc/#the-easy-way","text":"change database version in DDEV configuration, restart; If errors (\"Unable to start project because the configured database type does not match the current actual database\"), go for the hard way.","title":"The easy way"},{"location":"Development/Environment/DDEV/ddev_misc/#the-hard-way","text":"backup yourself any databases you want to keep, DDEV will destroy all; use phpMyAdmin or CLI, DDEV snapshots will not work ddev start (do not change configuration by hand); ddev debug migrate-database mariadb:10.8 DDEV will promise to import back the databases however: it will only handle the db database, any custom databases will only be destroyed; even for the db the import will sometimes fail;","title":"The hard way"},{"location":"Development/Environment/DDEV/ddev_misc/#other-solutions","text":"Untested: steps described in this bug report","title":"Other solutions"},{"location":"Development/Environment/DDEV/ddev_setup/","text":"DDEV: project setup ddev config Customize .ddev/config.yaml php_version: \"8.2\" webserver_type: apache-fpm database: type: mariadb version: \"10.8\" timezone: Europe/Rome webimage_extra_packages: [php-ast] .ddev/php/99-custom.ini ; Custom php configuration ; Log all errors error_reporting = E_ALL ; But do not display them in the frontend display_errors = Off .ddev/docker-compose.mounts.yaml Note: make sure the directory p exists in the home path. version: '3.6' services: web: volumes: - type: bind # source = path on host source: $HOME/p # target = path in container target: $HOME/p","title":"DDEV: project setup"},{"location":"Development/Environment/DDEV/ddev_setup/#ddev-project-setup","text":"ddev config","title":"DDEV: project setup"},{"location":"Development/Environment/DDEV/ddev_setup/#customize","text":"","title":"Customize"},{"location":"Development/Environment/DDEV/ddev_setup/#ddevconfigyaml","text":"php_version: \"8.2\" webserver_type: apache-fpm database: type: mariadb version: \"10.8\" timezone: Europe/Rome webimage_extra_packages: [php-ast]","title":".ddev/config.yaml"},{"location":"Development/Environment/DDEV/ddev_setup/#ddevphp99-customini","text":"; Custom php configuration ; Log all errors error_reporting = E_ALL ; But do not display them in the frontend display_errors = Off","title":".ddev/php/99-custom.ini"},{"location":"Development/Environment/DDEV/ddev_setup/#ddevdocker-composemountsyaml","text":"Note: make sure the directory p exists in the home path. version: '3.6' services: web: volumes: - type: bind # source = path on host source: $HOME/p # target = path in container target: $HOME/p","title":".ddev/docker-compose.mounts.yaml"},{"location":"Development/Environment/DDEV/ddev_sqlfluff/","text":"DDEV: SQLFluff .ddev/web-build/Dockerfile # Install SQLFluff SQL linter. `sudo` so it's installed globally and available in PATH. RUN sudo apt -y install sqlfluff .ddev/commands/host/sql-lint #!/bin/bash ## Description: Lint SQL files using SQLFluff ## Usage: sql-lint ## Example: ddev sql-lint ddev exec sqlfluff lint --dialect mysql /var/www/html/resources/storage/ # .ddev/commands/host/sql-fix #!/bin/bash ## Description: Fix SQL files using SQLFluff ## Usage: sql-fix ## Example: ddev sql-fix ddev exec sqlfluff fix --dialect mysql /var/www/html/resources/storage/","title":"DDEV: SQLFluff"},{"location":"Development/Environment/DDEV/ddev_sqlfluff/#ddev-sqlfluff","text":".ddev/web-build/Dockerfile # Install SQLFluff SQL linter. `sudo` so it's installed globally and available in PATH. RUN sudo apt -y install sqlfluff .ddev/commands/host/sql-lint #!/bin/bash ## Description: Lint SQL files using SQLFluff ## Usage: sql-lint ## Example: ddev sql-lint ddev exec sqlfluff lint --dialect mysql /var/www/html/resources/storage/ # .ddev/commands/host/sql-fix #!/bin/bash ## Description: Fix SQL files using SQLFluff ## Usage: sql-fix ## Example: ddev sql-fix ddev exec sqlfluff fix --dialect mysql /var/www/html/resources/storage/","title":"DDEV: SQLFluff"},{"location":"Development/Environment/DDEV/ddev_usage/","text":"DDEV: usage # Start ddev start # Launch app ddev launch # Launch phpMyAdmin ddev launch -p # Launch Mailhog ddev launch -m # Show details ddev status # Connect to MySQL via command line from host # Find post (\"Show details\") mysql --protocol tcp -h 127.0.0.1 -P __PORT__ -u db -p # Run command in ddev environment ddev exec __COMMAND__ # Connect to ssh ddev ssh # View logs in real time ddev logs --follow","title":"DDEV: usage"},{"location":"Development/Environment/DDEV/ddev_usage/#ddev-usage","text":"# Start ddev start # Launch app ddev launch # Launch phpMyAdmin ddev launch -p # Launch Mailhog ddev launch -m # Show details ddev status # Connect to MySQL via command line from host # Find post (\"Show details\") mysql --protocol tcp -h 127.0.0.1 -P __PORT__ -u db -p # Run command in ddev environment ddev exec __COMMAND__ # Connect to ssh ddev ssh # View logs in real time ddev logs --follow","title":"DDEV: usage"},{"location":"Development/Environment/DDEV/ddev_windows/","text":"DDEV: Windows Options Docker Desktop Docker CE This article uses the \"Docker Desktop\" approach. Uninstall Docker Toolbox if present Chocolatey Windows PowerShell > Run as administrator Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) Close PowerShell. Windows: DDEV, mkcert Windows PowerShell > Run as administrator # Install DDEV and mkcert choco install -y ddev mkcert # Setup mkcert mkcert -install # Set WSL2 to use the Certificate Authority installed on the Windows side $env:CAROOT=\"$(mkcert -CAROOT)\"; setx CAROOT $env:CAROOT; If ($Env:WSLENV -notlike \"*CAROOT/up:*\") { $env:WSLENV=\"CAROOT/up:$env:WSLENV\"; setx WSLENV $Env:WSLENV } Close PowerShell. WSL2 Microsoft Store > Windows Subsystem for Linux > Get Windows PowerShell > Run as administrator # Install Ubuntu wsl --install Reboot (if required), will continue setup afterwards (create user and password). Windows PowerShell > Run as administrator # Use WSL2 as default wsl --set-default-version 2 Update Windows Update > Advanced options > Receive updates for other Microsoft products when you update Windows Manually: wsl --update Troubleshooting If nothing happens when running wsl --install (help is diplayed): make sure \"Windows Subsystem for Linux\" is installed; if installed, try specifying distro: wsl --install --distribution Ubuntu Docker Desktop Note: \"Docker Desktop is free for small businesses (fewer than 250 employees AND less than $10 million in annual revenue), personal use, education, and non-commercial open source projects. Otherwise, it requires a paid subscription for professional use. Paid subscriptions are also required for government entities.\" Download: https://www.docker.com/products/docker-desktop/ Leave checked \"Use WSL 2 instead of Hyper-V (recommended)\". Enable WSL integration Settings > Resources > WSL integration > Enable integration with additional distros > Ubuntu > Apply and restart Restart computer. Troubleshooting \"Docker Desktop requires a newer WSL kernel version.\" WSL is probably not installed. Verify Show distros Windows PowerShell / Terminal wsl -l -v Should display 3, all on WSL2, Ubuntu as default. Example: NAME STATE VERSION * Ubuntu Running 2 docker-desktop Running 2 docker-desktop-data Running 2 Check mkcert installed correctly Ubuntu: echo $CAROOT # Should display path /mnt/c/Users/__USER__/AppData/Local/mkcert Check docker is running inside Ubuntu docker ps # CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES Ubuntu: DDEV, mkcert Ubuntu: curl -fsSL https://pkg.ddev.com/apt/gpg.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/ddev.gpg > /dev/null echo \"deb [signed-by=/etc/apt/trusted.gpg.d/ddev.gpg] https://pkg.ddev.com/apt/ * *\" | sudo tee /etc/apt/sources.list.d/ddev.list >/dev/null sudo apt update && sudo apt install -y ddev DDEV verify Make sure the same version is used in both Windows and Ubuntu # Windows ddev.exe version # Ubuntu ddev version Notes No need to setup PHP 8, Composer 2, etc in Ubuntu, they will be managed by ddev. External resources Docker Installation DDEV Installation","title":"DDEV: Windows"},{"location":"Development/Environment/DDEV/ddev_windows/#ddev-windows","text":"","title":"DDEV: Windows"},{"location":"Development/Environment/DDEV/ddev_windows/#options","text":"Docker Desktop Docker CE This article uses the \"Docker Desktop\" approach.","title":"Options"},{"location":"Development/Environment/DDEV/ddev_windows/#uninstall-docker-toolbox-if-present","text":"","title":"Uninstall Docker Toolbox if present"},{"location":"Development/Environment/DDEV/ddev_windows/#chocolatey","text":"Windows PowerShell > Run as administrator Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) Close PowerShell.","title":"Chocolatey"},{"location":"Development/Environment/DDEV/ddev_windows/#windows-ddev-mkcert","text":"Windows PowerShell > Run as administrator # Install DDEV and mkcert choco install -y ddev mkcert # Setup mkcert mkcert -install # Set WSL2 to use the Certificate Authority installed on the Windows side $env:CAROOT=\"$(mkcert -CAROOT)\"; setx CAROOT $env:CAROOT; If ($Env:WSLENV -notlike \"*CAROOT/up:*\") { $env:WSLENV=\"CAROOT/up:$env:WSLENV\"; setx WSLENV $Env:WSLENV } Close PowerShell.","title":"Windows: DDEV, mkcert"},{"location":"Development/Environment/DDEV/ddev_windows/#wsl2","text":"Microsoft Store > Windows Subsystem for Linux > Get Windows PowerShell > Run as administrator # Install Ubuntu wsl --install Reboot (if required), will continue setup afterwards (create user and password). Windows PowerShell > Run as administrator # Use WSL2 as default wsl --set-default-version 2","title":"WSL2"},{"location":"Development/Environment/DDEV/ddev_windows/#update","text":"Windows Update > Advanced options > Receive updates for other Microsoft products when you update Windows Manually: wsl --update","title":"Update"},{"location":"Development/Environment/DDEV/ddev_windows/#troubleshooting","text":"If nothing happens when running wsl --install (help is diplayed): make sure \"Windows Subsystem for Linux\" is installed; if installed, try specifying distro: wsl --install --distribution Ubuntu","title":"Troubleshooting"},{"location":"Development/Environment/DDEV/ddev_windows/#docker-desktop","text":"Note: \"Docker Desktop is free for small businesses (fewer than 250 employees AND less than $10 million in annual revenue), personal use, education, and non-commercial open source projects. Otherwise, it requires a paid subscription for professional use. Paid subscriptions are also required for government entities.\" Download: https://www.docker.com/products/docker-desktop/ Leave checked \"Use WSL 2 instead of Hyper-V (recommended)\".","title":"Docker Desktop"},{"location":"Development/Environment/DDEV/ddev_windows/#enable-wsl-integration","text":"Settings > Resources > WSL integration > Enable integration with additional distros > Ubuntu > Apply and restart Restart computer.","title":"Enable WSL integration"},{"location":"Development/Environment/DDEV/ddev_windows/#troubleshooting_1","text":"","title":"Troubleshooting"},{"location":"Development/Environment/DDEV/ddev_windows/#docker-desktop-requires-a-newer-wsl-kernel-version","text":"WSL is probably not installed.","title":"\"Docker Desktop requires a newer WSL kernel version.\""},{"location":"Development/Environment/DDEV/ddev_windows/#verify","text":"","title":"Verify"},{"location":"Development/Environment/DDEV/ddev_windows/#show-distros","text":"Windows PowerShell / Terminal wsl -l -v Should display 3, all on WSL2, Ubuntu as default. Example: NAME STATE VERSION * Ubuntu Running 2 docker-desktop Running 2 docker-desktop-data Running 2","title":"Show distros"},{"location":"Development/Environment/DDEV/ddev_windows/#check-mkcert-installed-correctly","text":"Ubuntu: echo $CAROOT # Should display path /mnt/c/Users/__USER__/AppData/Local/mkcert","title":"Check mkcert installed correctly"},{"location":"Development/Environment/DDEV/ddev_windows/#check-docker-is-running-inside-ubuntu","text":"docker ps # CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES","title":"Check docker is running inside Ubuntu"},{"location":"Development/Environment/DDEV/ddev_windows/#ubuntu-ddev-mkcert","text":"Ubuntu: curl -fsSL https://pkg.ddev.com/apt/gpg.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/ddev.gpg > /dev/null echo \"deb [signed-by=/etc/apt/trusted.gpg.d/ddev.gpg] https://pkg.ddev.com/apt/ * *\" | sudo tee /etc/apt/sources.list.d/ddev.list >/dev/null sudo apt update && sudo apt install -y ddev","title":"Ubuntu: DDEV, mkcert"},{"location":"Development/Environment/DDEV/ddev_windows/#ddev-verify","text":"Make sure the same version is used in both Windows and Ubuntu # Windows ddev.exe version # Ubuntu ddev version","title":"DDEV verify"},{"location":"Development/Environment/DDEV/ddev_windows/#notes","text":"No need to setup PHP 8, Composer 2, etc in Ubuntu, they will be managed by ddev.","title":"Notes"},{"location":"Development/Environment/DDEV/ddev_windows/#external-resources","text":"Docker Installation DDEV Installation","title":"External resources"},{"location":"Development/Environment/Docker/","text":"Docker: index About \"Docker is a set of platform as a service products that use OS-level virtualization to deliver software in packages called containers\" Articles Docker + PHP + Composer","title":"Docker: index"},{"location":"Development/Environment/Docker/#docker-index","text":"","title":"Docker: index"},{"location":"Development/Environment/Docker/#about","text":"\"Docker is a set of platform as a service products that use OS-level virtualization to deliver software in packages called containers\"","title":"About"},{"location":"Development/Environment/Docker/#articles","text":"Docker + PHP + Composer","title":"Articles"},{"location":"Development/Environment/Docker/docker_php_composer_cli/","text":"Docker + PHP + Composer PHP library/package/CLI development without having the required PHP / Composer versions installed locally. No web interface. Setup Copy needed files from the repository. Hint: Download only one specific folder from a remote repository : # View svn ls https://github.com/webservco/sandbox.git/trunk/.docker # Download svn export https://github.com/webservco/sandbox.git/trunk/.docker Usage 1) Copy (snapshot) mode Read comments / edit to customize: .docker/config/php82-cli-copy/Dockerfile Use case: check project in isolation, without adding the vendor dir on local (avoid PHAN errors when project is used as a dependency in another project); Files are copied into the container at build time (not updated in real-time); Working on a \"snapshot\" done at the time of the build Installs composer dependencies Runs all checks by default # (Optional) Create temporary directory for special project dependencies (local). BUILD_TEMP_DIR='.docker/assets/temp/'; mkdir --parents ${BUILD_TEMP_DIR}p/parcelvalue-v3/framework/ # Copy files into the temporary directory (local). cp --recursive ~/p/parcelvalue-v3/framework/ ${BUILD_TEMP_DIR}p/parcelvalue-v3/ # Build. DOCKER_IMAGE_TAG='lhost-v3-framework-copy'; DOCKER_CONTAINER_NAME='lhost-v3-framework-copy-container'; docker build --tag ${DOCKER_IMAGE_TAG} -f .docker/config/php82-cli-copy/Dockerfile . # (Optional) Cleanup temporary directory. rm -rf ${BUILD_TEMP_DIR}* # Run: default command: run all checks docker run -it --rm --name ${DOCKER_CONTAINER_NAME} ${DOCKER_IMAGE_TAG} # Run: custom command (default command is not executed) docker run -it --rm --name ${DOCKER_CONTAINER_NAME} ${DOCKER_IMAGE_TAG} /bin/bash -c \"ls -lah vendor\" # Cleanup docker image rm ${DOCKER_IMAGE_TAG} 2) Mount (real-time) mode Read comments / edit to customize: .docker/config/php82-cli-mount/Dockerfile Use case: active development, need to run quickly on up-to-date files; need vendor dir (or no problem if present); Files are mounted at run time, so no composer commands are run automatically Execute any commands needed at run time Caveat: This mode is unuseful if using special dependencies; since mounted in a different path in the container, they will not be available on the local filesystem (so not able to run composer commands on local or have code available in vscode for example); # Build. docker build -t lhost-v3-framework-mount -f .docker/config/php82-cli-mount/Dockerfile . # Run (specify mounts and commands to run) docker run -it --rm --name lhost-v3-framework-running \\ # special dependencies --mount src=\"$HOME/p/parcelvalue-v3/framework/\",target=/home/dev/p/parcelvalue-v3/framework/,type=bind \\ # project code --mount src=.,target=/home/dev/project,type=bind \\ lhost-v3-framework-mount \\ /bin/bash -c \"composer update && composer all\" External resources https://hub.docker.com/_/php/ https://hub.docker.com/_/composer https://medium.com/@othillo/adding-composer-to-php-docker-images-using-multi-stage-builds-2a10967ae6c1","title":"Docker + PHP + Composer"},{"location":"Development/Environment/Docker/docker_php_composer_cli/#docker-php-composer","text":"PHP library/package/CLI development without having the required PHP / Composer versions installed locally. No web interface.","title":"Docker + PHP + Composer"},{"location":"Development/Environment/Docker/docker_php_composer_cli/#setup","text":"Copy needed files from the repository. Hint: Download only one specific folder from a remote repository : # View svn ls https://github.com/webservco/sandbox.git/trunk/.docker # Download svn export https://github.com/webservco/sandbox.git/trunk/.docker","title":"Setup"},{"location":"Development/Environment/Docker/docker_php_composer_cli/#usage","text":"","title":"Usage"},{"location":"Development/Environment/Docker/docker_php_composer_cli/#1-copy-snapshot-mode","text":"Read comments / edit to customize: .docker/config/php82-cli-copy/Dockerfile Use case: check project in isolation, without adding the vendor dir on local (avoid PHAN errors when project is used as a dependency in another project); Files are copied into the container at build time (not updated in real-time); Working on a \"snapshot\" done at the time of the build Installs composer dependencies Runs all checks by default # (Optional) Create temporary directory for special project dependencies (local). BUILD_TEMP_DIR='.docker/assets/temp/'; mkdir --parents ${BUILD_TEMP_DIR}p/parcelvalue-v3/framework/ # Copy files into the temporary directory (local). cp --recursive ~/p/parcelvalue-v3/framework/ ${BUILD_TEMP_DIR}p/parcelvalue-v3/ # Build. DOCKER_IMAGE_TAG='lhost-v3-framework-copy'; DOCKER_CONTAINER_NAME='lhost-v3-framework-copy-container'; docker build --tag ${DOCKER_IMAGE_TAG} -f .docker/config/php82-cli-copy/Dockerfile . # (Optional) Cleanup temporary directory. rm -rf ${BUILD_TEMP_DIR}* # Run: default command: run all checks docker run -it --rm --name ${DOCKER_CONTAINER_NAME} ${DOCKER_IMAGE_TAG} # Run: custom command (default command is not executed) docker run -it --rm --name ${DOCKER_CONTAINER_NAME} ${DOCKER_IMAGE_TAG} /bin/bash -c \"ls -lah vendor\" # Cleanup docker image rm ${DOCKER_IMAGE_TAG}","title":"1) Copy (snapshot) mode"},{"location":"Development/Environment/Docker/docker_php_composer_cli/#2-mount-real-time-mode","text":"Read comments / edit to customize: .docker/config/php82-cli-mount/Dockerfile Use case: active development, need to run quickly on up-to-date files; need vendor dir (or no problem if present); Files are mounted at run time, so no composer commands are run automatically Execute any commands needed at run time Caveat: This mode is unuseful if using special dependencies; since mounted in a different path in the container, they will not be available on the local filesystem (so not able to run composer commands on local or have code available in vscode for example); # Build. docker build -t lhost-v3-framework-mount -f .docker/config/php82-cli-mount/Dockerfile . # Run (specify mounts and commands to run) docker run -it --rm --name lhost-v3-framework-running \\ # special dependencies --mount src=\"$HOME/p/parcelvalue-v3/framework/\",target=/home/dev/p/parcelvalue-v3/framework/,type=bind \\ # project code --mount src=.,target=/home/dev/project,type=bind \\ lhost-v3-framework-mount \\ /bin/bash -c \"composer update && composer all\"","title":"2) Mount (real-time) mode"},{"location":"Development/Environment/Docker/docker_php_composer_cli/#external-resources","text":"https://hub.docker.com/_/php/ https://hub.docker.com/_/composer https://medium.com/@othillo/adding-composer-to-php-docker-images-using-multi-stage-builds-2a10967ae6c1","title":"External resources"},{"location":"Development/Environment/WSL/","text":"WSL: index Articles WSL + vscode Misc","title":"WSL: index"},{"location":"Development/Environment/WSL/#wsl-index","text":"","title":"WSL: index"},{"location":"Development/Environment/WSL/#articles","text":"WSL + vscode Misc","title":"Articles"},{"location":"Development/Environment/WSL/wsl_misc/","text":"WSL Misc # List local distributions wsl --list # List running distributions wsl --list --running # List distribution available to be installed wsl --list --online # Install specific distribution wsl --install --distribution __NAME__ # Stop one distribution (it will start again automatically next time it is opened) wsl --terminate Ubuntu # Start one wsl --distribution Ubuntu # Stop all wsl --shutdown Backup Stop Backup ext4.vhdx file from C:\\Users\\__USER____\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\ext4.vhdx Start Reset distribution Settings > Apps (Apps & features) > Ubuntu > Advanced options > Reset > Reset Uninstall distribution Windows PowerShell > Run as administrator # List local distributions wsl --list # Remove distribution from WSL and delete all of the data associated with that Linux distribution wsl --unregister __NAME__ Alternatively: Settings > Apps (Apps & features) > Ubuntu > Uninstall Repeat for any other distro. Uninstall WSL Settings > Apps (Apps & features) > Windows Subsystem for Linux > Uninstall Disable WSL Do not perform this step if only resetting and starting over. Settings > Apps (Apps & features) > Optional features > More Windows features > Uncheck \"Windows Subsystem for Linux\" External resources Basic commands for WSL","title":"WSL"},{"location":"Development/Environment/WSL/wsl_misc/#wsl","text":"","title":"WSL"},{"location":"Development/Environment/WSL/wsl_misc/#misc","text":"# List local distributions wsl --list # List running distributions wsl --list --running # List distribution available to be installed wsl --list --online # Install specific distribution wsl --install --distribution __NAME__ # Stop one distribution (it will start again automatically next time it is opened) wsl --terminate Ubuntu # Start one wsl --distribution Ubuntu # Stop all wsl --shutdown","title":"Misc"},{"location":"Development/Environment/WSL/wsl_misc/#backup","text":"Stop Backup ext4.vhdx file from C:\\Users\\__USER____\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\ext4.vhdx Start","title":"Backup"},{"location":"Development/Environment/WSL/wsl_misc/#reset-distribution","text":"Settings > Apps (Apps & features) > Ubuntu > Advanced options > Reset > Reset","title":"Reset distribution"},{"location":"Development/Environment/WSL/wsl_misc/#uninstall-distribution","text":"Windows PowerShell > Run as administrator # List local distributions wsl --list # Remove distribution from WSL and delete all of the data associated with that Linux distribution wsl --unregister __NAME__ Alternatively: Settings > Apps (Apps & features) > Ubuntu > Uninstall Repeat for any other distro.","title":"Uninstall distribution"},{"location":"Development/Environment/WSL/wsl_misc/#uninstall-wsl","text":"Settings > Apps (Apps & features) > Windows Subsystem for Linux > Uninstall","title":"Uninstall WSL"},{"location":"Development/Environment/WSL/wsl_misc/#disable-wsl","text":"Do not perform this step if only resetting and starting over. Settings > Apps (Apps & features) > Optional features > More Windows features > Uncheck \"Windows Subsystem for Linux\"","title":"Disable WSL"},{"location":"Development/Environment/WSL/wsl_misc/#external-resources","text":"Basic commands for WSL","title":"External resources"},{"location":"Development/Environment/WSL/wsl_vscode/","text":"vscode + WSL Setup Visual Studio Code to work with WSL2. In Windows: Visual Studio Code: - Extensions > \"Remote - WSL\" > Install In Ubuntu: # cd a project # start vscode code . # does one time setup (install VS Code Server), then starts editor.","title":"vscode + WSL"},{"location":"Development/Environment/WSL/wsl_vscode/#vscode-wsl","text":"Setup Visual Studio Code to work with WSL2. In Windows: Visual Studio Code: - Extensions > \"Remote - WSL\" > Install In Ubuntu: # cd a project # start vscode code . # does one time setup (install VS Code Server), then starts editor.","title":"vscode + WSL"},{"location":"Development/Environment/Xdebug/","text":"Xdebug: index Articles Xdebug + ddev + Visual Studio Code Xdebug troubleshooting","title":"Xdebug: index"},{"location":"Development/Environment/Xdebug/#xdebug-index","text":"","title":"Xdebug: index"},{"location":"Development/Environment/Xdebug/#articles","text":"Xdebug + ddev + Visual Studio Code Xdebug troubleshooting","title":"Articles"},{"location":"Development/Environment/Xdebug/xdebug_ddev_vscode/","text":"Xdebug + DDEV + Visual Studio Code About Xdebug - Debugger and Profiler Tool for PHP This article is about using Step Debugging . \"Xdebug's step debugger allows you to interactively walk through your code to debug control flow and examine data structures.\" Setup: Windows WSL2 Ubuntu/WSL: do not install anything specific, everything is handled in the DDEV container; vscode: Install extension: WSL (publisher Microsoft); vscode: Install extension: PHP Debug (publisher Xdebug); vscode: Install the PHP Debug extension also in WSL (\"Install in WSL: Ubuntu\"); vscode: restart; If using Docker Desktop When running vscode from Ubuntu ( code . ) xdebug can't connect to the IDE. Official istructions . Documentation . Try (Ubuntu/WSL): # Setup DDEV Xdebug location ddev config global --xdebug-ide-location=wsl2 # Restart DDEV ddev restart Try (Ubuntu/WSL): # Setup DDEV Xdebug location ddev config global --xdebug-ide-location=container # Restart DDEV ddev restart Try (Ubuntu/WSL): # Get IP hostname -I # Setup DDEV Xdebug IP ddev config global --xdebug-ide-location=__IP__ # Restart DDEV ddev restart Note: do not use custom ini file as some comments suggest, as the project may be run in different environments where the setup is different. Configuration .vscode/launch.json { // Custom xdebug configuration for Visual Studio Code + DDEV \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Listen for Xdebug\", \"type\": \"php\", \"request\": \"launch\", \"port\": 9003, \"pathMappings\": { \"/var/www/html\": \"${workspaceRoot}\" } } ] } Usage Enable in DDEV (make sure project is started): ddev xdebug on . Start debugging in vscode: Open \"Run and Debug\" (Ctrl+Shift+D) Start debugging: \"Listen for Xdebug\" (F5) Test: public/development/xdebug/xdebug-test.php Add a breakpoint (click on the left of the line number) on the line with $var3 , and another one on the line with the echo . Navigate to the page xdebug-test.php : with parameter: https://sandbox.ddev.site/development/xdebug/xdebug-test.php?id=123 without parameter: https://sandbox.ddev.site/development/xdebug/xdebug-test.php Page loading is paused and the editor should now be in focus. Go to vscode, some data should appear in the \"Run and Debug\" section. Note: $var3 is not initialized because the break happens before the line is processed. By clicking \"Continue\" we can go to the next breakpoint. Now also $var3 has a value. Notes Breakpoints will be added before the next line with code (if adding on a blank line, it will be moved); To debug also any errors that happen during execution (even if caught): Breakpoints > Everything. To stop debugging: vscode: red square button (Shift+F5) DDEV: ddev xdebug off References Step Debugging with Xdebug Xdebug cases Pseudo-hosts values for xdebug.client_host","title":"Xdebug + DDEV + Visual Studio Code"},{"location":"Development/Environment/Xdebug/xdebug_ddev_vscode/#xdebug-ddev-visual-studio-code","text":"","title":"Xdebug + DDEV + Visual Studio Code"},{"location":"Development/Environment/Xdebug/xdebug_ddev_vscode/#about","text":"Xdebug - Debugger and Profiler Tool for PHP This article is about using Step Debugging . \"Xdebug's step debugger allows you to interactively walk through your code to debug control flow and examine data structures.\"","title":"About"},{"location":"Development/Environment/Xdebug/xdebug_ddev_vscode/#setup-windows-wsl2","text":"Ubuntu/WSL: do not install anything specific, everything is handled in the DDEV container; vscode: Install extension: WSL (publisher Microsoft); vscode: Install extension: PHP Debug (publisher Xdebug); vscode: Install the PHP Debug extension also in WSL (\"Install in WSL: Ubuntu\"); vscode: restart;","title":"Setup: Windows WSL2"},{"location":"Development/Environment/Xdebug/xdebug_ddev_vscode/#if-using-docker-desktop","text":"When running vscode from Ubuntu ( code . ) xdebug can't connect to the IDE. Official istructions . Documentation . Try (Ubuntu/WSL): # Setup DDEV Xdebug location ddev config global --xdebug-ide-location=wsl2 # Restart DDEV ddev restart Try (Ubuntu/WSL): # Setup DDEV Xdebug location ddev config global --xdebug-ide-location=container # Restart DDEV ddev restart Try (Ubuntu/WSL): # Get IP hostname -I # Setup DDEV Xdebug IP ddev config global --xdebug-ide-location=__IP__ # Restart DDEV ddev restart Note: do not use custom ini file as some comments suggest, as the project may be run in different environments where the setup is different.","title":"If using Docker Desktop"},{"location":"Development/Environment/Xdebug/xdebug_ddev_vscode/#configuration","text":"","title":"Configuration"},{"location":"Development/Environment/Xdebug/xdebug_ddev_vscode/#vscodelaunchjson","text":"{ // Custom xdebug configuration for Visual Studio Code + DDEV \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Listen for Xdebug\", \"type\": \"php\", \"request\": \"launch\", \"port\": 9003, \"pathMappings\": { \"/var/www/html\": \"${workspaceRoot}\" } } ] }","title":".vscode/launch.json"},{"location":"Development/Environment/Xdebug/xdebug_ddev_vscode/#usage","text":"Enable in DDEV (make sure project is started): ddev xdebug on . Start debugging in vscode: Open \"Run and Debug\" (Ctrl+Shift+D) Start debugging: \"Listen for Xdebug\" (F5) Test: public/development/xdebug/xdebug-test.php Add a breakpoint (click on the left of the line number) on the line with $var3 , and another one on the line with the echo . Navigate to the page xdebug-test.php : with parameter: https://sandbox.ddev.site/development/xdebug/xdebug-test.php?id=123 without parameter: https://sandbox.ddev.site/development/xdebug/xdebug-test.php Page loading is paused and the editor should now be in focus. Go to vscode, some data should appear in the \"Run and Debug\" section. Note: $var3 is not initialized because the break happens before the line is processed. By clicking \"Continue\" we can go to the next breakpoint. Now also $var3 has a value.","title":"Usage"},{"location":"Development/Environment/Xdebug/xdebug_ddev_vscode/#notes","text":"Breakpoints will be added before the next line with code (if adding on a blank line, it will be moved); To debug also any errors that happen during execution (even if caught): Breakpoints > Everything. To stop debugging: vscode: red square button (Shift+F5) DDEV: ddev xdebug off","title":"Notes"},{"location":"Development/Environment/Xdebug/xdebug_ddev_vscode/#references","text":"Step Debugging with Xdebug Xdebug cases Pseudo-hosts values for xdebug.client_host","title":"References"},{"location":"Development/Environment/Xdebug/xdebug_troubleshooting/","text":"Xdebug troubleshooting Check logs: ddev logs -f Make sure Xdebug can connect to the correct IP: telnet __IP__ 9003 . Note: seems while 127.0.0.1 works with telnet, it can't be sued by Xdebug and we need the external/host IP;","title":"Xdebug troubleshooting"},{"location":"Development/Environment/Xdebug/xdebug_troubleshooting/#xdebug-troubleshooting","text":"Check logs: ddev logs -f Make sure Xdebug can connect to the correct IP: telnet __IP__ 9003 . Note: seems while 127.0.0.1 works with telnet, it can't be sued by Xdebug and we need the external/host IP;","title":"Xdebug troubleshooting"},{"location":"Development/PHP/ErrorHandling/","text":"Error Handling","title":"Error Handling"},{"location":"Development/PHP/ErrorHandling/#error-handling","text":"","title":"Error Handling"},{"location":"Development/PHP/Application/","text":"PHP: Application: index Notes Apache Application is set up to use Apache web server (uses .htaccess file for front controller management). Articles Application setup Project structure Application workflow Application TODO Test HTTP tests: tests/HTTP/HTTPTests.http Notes Refactoring ideas Move some common code to a general library to have lighter applications ApplicationFactoryFactory use interfaces for RequestHandlerFactory , SpecificModuleControllerInstantiator ;","title":"PHP: Application: index"},{"location":"Development/PHP/Application/#php-application-index","text":"","title":"PHP: Application: index"},{"location":"Development/PHP/Application/#notes","text":"","title":"Notes"},{"location":"Development/PHP/Application/#apache","text":"Application is set up to use Apache web server (uses .htaccess file for front controller management).","title":"Apache"},{"location":"Development/PHP/Application/#articles","text":"Application setup Project structure Application workflow Application TODO","title":"Articles"},{"location":"Development/PHP/Application/#test","text":"HTTP tests: tests/HTTP/HTTPTests.http","title":"Test"},{"location":"Development/PHP/Application/#notes_1","text":"","title":"Notes"},{"location":"Development/PHP/Application/#refactoring-ideas","text":"Move some common code to a general library to have lighter applications","title":"Refactoring ideas"},{"location":"Development/PHP/Application/#applicationfactoryfactory","text":"use interfaces for RequestHandlerFactory , SpecificModuleControllerInstantiator ;","title":"ApplicationFactoryFactory"},{"location":"Development/PHP/Application/application_setup/","text":"PHP: Application setup Setup Clone sandbox project in custom folder, set custom git remote, etc; TODO : notes (check ws/component for example setup commands); Customize README.md Project name, description, etc. composer.json authors description homepage keywords name require (remove unneeded) .gitignore CHANGELOG.md CONTRIBUTING.md LICENSE mkdocs.yml site_name .ddev/config.yaml name .phpcs/php-coding-standard.xml Directories bin config src tests var/log","title":"PHP: Application setup"},{"location":"Development/PHP/Application/application_setup/#php-application-setup","text":"","title":"PHP: Application setup"},{"location":"Development/PHP/Application/application_setup/#setup","text":"Clone sandbox project in custom folder, set custom git remote, etc; TODO : notes (check ws/component for example setup commands);","title":"Setup"},{"location":"Development/PHP/Application/application_setup/#customize","text":"","title":"Customize"},{"location":"Development/PHP/Application/application_setup/#readmemd","text":"Project name, description, etc.","title":"README.md"},{"location":"Development/PHP/Application/application_setup/#composerjson","text":"authors description homepage keywords name require (remove unneeded)","title":"composer.json"},{"location":"Development/PHP/Application/application_setup/#gitignore","text":"","title":".gitignore"},{"location":"Development/PHP/Application/application_setup/#changelogmd","text":"","title":"CHANGELOG.md"},{"location":"Development/PHP/Application/application_setup/#contributingmd","text":"","title":"CONTRIBUTING.md"},{"location":"Development/PHP/Application/application_setup/#license","text":"","title":"LICENSE"},{"location":"Development/PHP/Application/application_setup/#mkdocsyml","text":"site_name","title":"mkdocs.yml"},{"location":"Development/PHP/Application/application_setup/#ddevconfigyaml","text":"name","title":".ddev/config.yaml"},{"location":"Development/PHP/Application/application_setup/#phpcsphp-coding-standardxml","text":"","title":".phpcs/php-coding-standard.xml"},{"location":"Development/PHP/Application/application_setup/#directories","text":"bin config src tests var/log","title":"Directories"},{"location":"Development/PHP/Application/application_structure/","text":"Application: Project structure Command Code that will be run by CLI Container DIY Dependency Injection container implementation. Creates and keeps a list of single instances (only one instance created). Contract Interfaces Controller Can use any nested directory structure (path is not hard coded when resolving controller); Receives a request, returns a response; Uses the same definition as Psr\\Http\\Server\\RequestHandlerInterface ; Can use a ViewRendererInterface to format the output; Since using an interface it is agnostic about the type of response it will return; the caller (usually another request handler) will feed it an appropriate view based on the request (eg. HtmlRenderer , JSONRenderer , etc) DataTransfer DTO's, ValueObject's, etc Factory DIY Dependency Injection container implementation. Create and return instance (new instance created each time); Instantiator Special type of Factory that creates objects dynamically. Used to instantiate Controllers and related objects. Middleware Do extra request processing before it is handled by a request handler. RequestHandler Handle input Request (optionally processed by middleware) return a Response that can be emitted. Service Project specific services. View View objects. Templates resources/templates template group directories; can contain/use multiple; individual theme directory structure not hardcoded so free to structure in any way; each template group can have multiple layouts (themes?) (handled via one main template) all using the same templates; eg. main.light , main.dark ; Vanilla resources/templates/vanilla simple (vanilla) PHP/HTML theme;","title":"Application: Project structure"},{"location":"Development/PHP/Application/application_structure/#application-project-structure","text":"","title":"Application: Project structure"},{"location":"Development/PHP/Application/application_structure/#command","text":"Code that will be run by CLI","title":"Command"},{"location":"Development/PHP/Application/application_structure/#container","text":"DIY Dependency Injection container implementation. Creates and keeps a list of single instances (only one instance created).","title":"Container"},{"location":"Development/PHP/Application/application_structure/#contract","text":"Interfaces","title":"Contract"},{"location":"Development/PHP/Application/application_structure/#controller","text":"Can use any nested directory structure (path is not hard coded when resolving controller); Receives a request, returns a response; Uses the same definition as Psr\\Http\\Server\\RequestHandlerInterface ; Can use a ViewRendererInterface to format the output; Since using an interface it is agnostic about the type of response it will return; the caller (usually another request handler) will feed it an appropriate view based on the request (eg. HtmlRenderer , JSONRenderer , etc)","title":"Controller"},{"location":"Development/PHP/Application/application_structure/#datatransfer","text":"DTO's, ValueObject's, etc","title":"DataTransfer"},{"location":"Development/PHP/Application/application_structure/#factory","text":"DIY Dependency Injection container implementation. Create and return instance (new instance created each time);","title":"Factory"},{"location":"Development/PHP/Application/application_structure/#instantiator","text":"Special type of Factory that creates objects dynamically. Used to instantiate Controllers and related objects.","title":"Instantiator"},{"location":"Development/PHP/Application/application_structure/#middleware","text":"Do extra request processing before it is handled by a request handler.","title":"Middleware"},{"location":"Development/PHP/Application/application_structure/#requesthandler","text":"Handle input Request (optionally processed by middleware) return a Response that can be emitted.","title":"RequestHandler"},{"location":"Development/PHP/Application/application_structure/#service","text":"Project specific services.","title":"Service"},{"location":"Development/PHP/Application/application_structure/#view","text":"View objects.","title":"View"},{"location":"Development/PHP/Application/application_structure/#templates","text":"resources/templates template group directories; can contain/use multiple; individual theme directory structure not hardcoded so free to structure in any way; each template group can have multiple layouts (themes?) (handled via one main template) all using the same templates; eg. main.light , main.dark ;","title":"Templates"},{"location":"Development/PHP/Application/application_structure/#vanilla","text":"resources/templates/vanilla simple (vanilla) PHP/HTML theme;","title":"Vanilla"},{"location":"Development/PHP/Application/application_todo/","text":"Application: TODO createCommonView : avoid creating object 2 times (current view, main view); ? ErrorController / NotFoundController : move to components; Form : create a form builder; problems: getting default data (usually dome from objects); no obvious way to solve if using static configuration;","title":"Application: TODO"},{"location":"Development/PHP/Application/application_todo/#application-todo","text":"createCommonView : avoid creating object 2 times (current view, main view); ? ErrorController / NotFoundController : move to components; Form : create a form builder; problems: getting default data (usually dome from objects); no obvious way to solve if using static configuration;","title":"Application: TODO"},{"location":"Development/PHP/Application/application_workflow/","text":"Application: Workflow (WIP) Notes Controller/Contract/ general interface Controller/Service/ general abstract controller, specific controller resources/templates/vanilla/main/ main template View/ main, specific Factory/View/Container resources/templates/vanilla/ specific config RequestHandler/ThreePart/ (why needed?, no customization was required) src/Project/Factory/Http/RequestHandlerFactory.php src/Project/Factory/Middleware/ResourceMiddlewareFactory.php src/Project/Instantiator/Controller create main src/Project/Instantiator/Controller/SpecificModuleControllerInstantiator.php edit Basic application structure (TODO) bin (if using Command ); public .htaccess index.php resources/templates ; src/Project ; config ; Create a new module (Command) create command: src/Project/Command/ create command factory: src/Project/Factory/Command/ create command runner: bin/ Create a new module (Web) create: src/Project/Instantiator/Controller/ (if special dependencies): create: src/Project/Factory/Container/ ( TODO : add other steps) Add a new page in an existing section. ( TODO : check) define what you want to display: create view (implements ViewInterface) create template: display view (if working with storage): add interface method(s) (if working with storage): add storage method(s) create controller add route (config dir) Form workflow ( TODO : check) (if need custom method(s)) create from factory interface (extends FormFactoryInterface) create form factory (FormFactoryInterface) add/update FormFactoryContainerInterface add/update FormFactoryContainer controller: createAndHandleForm view: add form API workflow Authentication src/Project/Middleware/ApiAuthenticationMiddleware.php src/Project/Factory/Http/AbstractRequestHandlerFactory.php . createApiAuthenticationMiddleware src/Project/Factory/Http/RequestHandlerFactory.php . createRequestHandler . addMiddleware Configuration config/ Container src/Project/Contract/Container/API/ src/Project/Container/API/ src/Project/Factory/Container/APILocalDependencyContainerFactory.php src/Project/Instantiator/Controller/APIModuleControllerInstantiator.php Data Transfer Objects src/Project/DataTransfer/API/ Views src/Project/View/API/ Templates resources/templates/vanilla/main/main.api.default.php resources/templates/vanilla/api/default.php Controller src/Project/Controller/API/AbstractAPIController.php src/Project/Controller/API/APIController.php Routes configuration config/API/Routes.php Middleware src/Project/RequestHandler/ThreePart/ApiRequestHandler.php src/Project/Factory/Middleware/ResourceMiddlewareFactory.php createApiRequestHandler getResouceMiddlewareHandlers","title":"Application: Workflow (WIP)"},{"location":"Development/PHP/Application/application_workflow/#application-workflow-wip","text":"","title":"Application: Workflow (WIP)"},{"location":"Development/PHP/Application/application_workflow/#notes","text":"Controller/Contract/ general interface Controller/Service/ general abstract controller, specific controller resources/templates/vanilla/main/ main template View/ main, specific Factory/View/Container resources/templates/vanilla/ specific config RequestHandler/ThreePart/ (why needed?, no customization was required) src/Project/Factory/Http/RequestHandlerFactory.php src/Project/Factory/Middleware/ResourceMiddlewareFactory.php src/Project/Instantiator/Controller create main src/Project/Instantiator/Controller/SpecificModuleControllerInstantiator.php edit","title":"Notes"},{"location":"Development/PHP/Application/application_workflow/#basic-application-structure","text":"(TODO) bin (if using Command ); public .htaccess index.php resources/templates ; src/Project ; config ;","title":"Basic application structure"},{"location":"Development/PHP/Application/application_workflow/#create-a-new-module-command","text":"create command: src/Project/Command/ create command factory: src/Project/Factory/Command/ create command runner: bin/","title":"Create a new module (Command)"},{"location":"Development/PHP/Application/application_workflow/#create-a-new-module-web","text":"create: src/Project/Instantiator/Controller/ (if special dependencies): create: src/Project/Factory/Container/ ( TODO : add other steps)","title":"Create a new module (Web)"},{"location":"Development/PHP/Application/application_workflow/#add-a-new-page-in-an-existing-section","text":"( TODO : check) define what you want to display: create view (implements ViewInterface) create template: display view (if working with storage): add interface method(s) (if working with storage): add storage method(s) create controller add route (config dir)","title":"Add a new page in an existing section."},{"location":"Development/PHP/Application/application_workflow/#form-workflow","text":"( TODO : check) (if need custom method(s)) create from factory interface (extends FormFactoryInterface) create form factory (FormFactoryInterface) add/update FormFactoryContainerInterface add/update FormFactoryContainer controller: createAndHandleForm view: add form","title":"Form workflow"},{"location":"Development/PHP/Application/application_workflow/#api-workflow","text":"","title":"API workflow"},{"location":"Development/PHP/Application/application_workflow/#authentication","text":"src/Project/Middleware/ApiAuthenticationMiddleware.php src/Project/Factory/Http/AbstractRequestHandlerFactory.php . createApiAuthenticationMiddleware src/Project/Factory/Http/RequestHandlerFactory.php . createRequestHandler . addMiddleware","title":"Authentication"},{"location":"Development/PHP/Application/application_workflow/#configuration","text":"config/","title":"Configuration"},{"location":"Development/PHP/Application/application_workflow/#container","text":"src/Project/Contract/Container/API/ src/Project/Container/API/ src/Project/Factory/Container/APILocalDependencyContainerFactory.php src/Project/Instantiator/Controller/APIModuleControllerInstantiator.php","title":"Container"},{"location":"Development/PHP/Application/application_workflow/#data-transfer-objects","text":"src/Project/DataTransfer/API/","title":"Data Transfer Objects"},{"location":"Development/PHP/Application/application_workflow/#views","text":"src/Project/View/API/","title":"Views"},{"location":"Development/PHP/Application/application_workflow/#templates","text":"resources/templates/vanilla/main/main.api.default.php resources/templates/vanilla/api/default.php","title":"Templates"},{"location":"Development/PHP/Application/application_workflow/#controller","text":"src/Project/Controller/API/AbstractAPIController.php src/Project/Controller/API/APIController.php","title":"Controller"},{"location":"Development/PHP/Application/application_workflow/#routes-configuration","text":"config/API/Routes.php","title":"Routes configuration"},{"location":"Development/PHP/Application/application_workflow/#middleware","text":"src/Project/RequestHandler/ThreePart/ApiRequestHandler.php src/Project/Factory/Middleware/ResourceMiddlewareFactory.php createApiRequestHandler getResouceMiddlewareHandlers","title":"Middleware"},{"location":"Development/PHP/Sandbox/","text":"PHP: Sandbox: index Sandbox functionality API module Generate JWT: https://jwt.io/#debugger-io Header: { \"alg\": \"HS256\", \"typ\": \"JWT\" } Payload: { \"sub\": \"A_USER_ID\", \"iss\": \"API_KEY_FROM_CONFIGURATION_FILE\" } Verify signature: your-256-bit-secret : JWT_SECRET from configuration file; set Authorization header (\"Bearer JWT \"); https://sandbox.ddev.site/api/v1/about https://sandbox.ddev.site/api/v1/version Test module Web: https://sandbox.ddev.site/sandbox/test Web: https://sandbox.ddev.site/sandbox/test/{SOME_STRING} CLI: ddev exec bin/sandbox-test Stuff module https://sandbox.ddev.site/stuff/items","title":"PHP: Sandbox: index"},{"location":"Development/PHP/Sandbox/#php-sandbox-index","text":"","title":"PHP: Sandbox: index"},{"location":"Development/PHP/Sandbox/#sandbox-functionality","text":"","title":"Sandbox functionality"},{"location":"Development/PHP/Sandbox/#api-module","text":"Generate JWT: https://jwt.io/#debugger-io Header: { \"alg\": \"HS256\", \"typ\": \"JWT\" } Payload: { \"sub\": \"A_USER_ID\", \"iss\": \"API_KEY_FROM_CONFIGURATION_FILE\" } Verify signature: your-256-bit-secret : JWT_SECRET from configuration file; set Authorization header (\"Bearer JWT \"); https://sandbox.ddev.site/api/v1/about https://sandbox.ddev.site/api/v1/version","title":"API module"},{"location":"Development/PHP/Sandbox/#test-module","text":"Web: https://sandbox.ddev.site/sandbox/test Web: https://sandbox.ddev.site/sandbox/test/{SOME_STRING} CLI: ddev exec bin/sandbox-test","title":"Test module"},{"location":"Development/PHP/Sandbox/#stuff-module","text":"https://sandbox.ddev.site/stuff/items","title":"Stuff module"},{"location":"Development/Tools/Documentation/","text":"Documentation mkdocs \"MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation.\" Deploy mkdocs gh-deploy # cleanup rm -rf site/*","title":"Documentation"},{"location":"Development/Tools/Documentation/#documentation","text":"","title":"Documentation"},{"location":"Development/Tools/Documentation/#mkdocs","text":"\"MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation.\"","title":"mkdocs"},{"location":"Development/Tools/Documentation/#deploy","text":"mkdocs gh-deploy # cleanup rm -rf site/*","title":"Deploy"},{"location":"Development/Tools/StaticAnalisys/","text":"Static analisys PHP Parallel Lint \"This application checks the syntax of PHP files in parallel.\" clear && ddev composer check:lint Phan \"Phan is a static analyzer for PHP that prefers to minimize false-positives. Phan attempts to prove incorrectness rather than correctness.\" clear && ddev composer check:phan PHP_CodeSniffer \"PHP_CodeSniffer is a set of two PHP scripts; the main phpcs script that tokenizes PHP, JavaScript and CSS files to detect violations of a defined coding standard, and a second phpcbf script to automatically correct coding standard violations. \" Standards used: PSR-12: Extended Coding Style slevomat/coding-standard clear && ddev composer check:phpcs PHPMD \"PHPMD is a spin-off project of PHP Depend and aims to be a PHP equivalent of the well known Java tool PMD.\" clear && ddev composer check:phpmd PHPStan - PHP Static Analysis Tool \"PHPStan focuses on finding errors in your code without actually running it. It catches whole classes of bugs even before you write tests for the code. It moves PHP closer to compiled languages in the sense that the correctness of each line of the code can be checked before you run the actual line.\" clear && ddev composer check:phpstan Psalm \"Psalm is a static analysis tool for finding errors in PHP applications.\" clear && ddev composer check:psalm","title":"Static analisys"},{"location":"Development/Tools/StaticAnalisys/#static-analisys","text":"","title":"Static analisys"},{"location":"Development/Tools/StaticAnalisys/#php-parallel-lint","text":"\"This application checks the syntax of PHP files in parallel.\" clear && ddev composer check:lint","title":"PHP Parallel Lint"},{"location":"Development/Tools/StaticAnalisys/#phan","text":"\"Phan is a static analyzer for PHP that prefers to minimize false-positives. Phan attempts to prove incorrectness rather than correctness.\" clear && ddev composer check:phan","title":"Phan"},{"location":"Development/Tools/StaticAnalisys/#php_codesniffer","text":"\"PHP_CodeSniffer is a set of two PHP scripts; the main phpcs script that tokenizes PHP, JavaScript and CSS files to detect violations of a defined coding standard, and a second phpcbf script to automatically correct coding standard violations. \" Standards used: PSR-12: Extended Coding Style slevomat/coding-standard clear && ddev composer check:phpcs","title":"PHP_CodeSniffer"},{"location":"Development/Tools/StaticAnalisys/#phpmd","text":"\"PHPMD is a spin-off project of PHP Depend and aims to be a PHP equivalent of the well known Java tool PMD.\" clear && ddev composer check:phpmd","title":"PHPMD"},{"location":"Development/Tools/StaticAnalisys/#phpstan-php-static-analysis-tool","text":"\"PHPStan focuses on finding errors in your code without actually running it. It catches whole classes of bugs even before you write tests for the code. It moves PHP closer to compiled languages in the sense that the correctness of each line of the code can be checked before you run the actual line.\" clear && ddev composer check:phpstan","title":"PHPStan - PHP Static Analysis Tool"},{"location":"Development/Tools/StaticAnalisys/#psalm","text":"\"Psalm is a static analysis tool for finding errors in PHP applications.\" clear && ddev composer check:psalm","title":"Psalm"}]}